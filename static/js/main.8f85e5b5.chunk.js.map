{"version":3,"sources":["ToDo/ListItems.js","ToDo/List.js","ToDo/Share.js","ToDo/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","checkboxClass","item","isChecked","className","FormControlLabel","control","Checkbox","onChange","handleCheckbox","checked","id","itemName","name","categoryId","label","List","console","log","category","categoryName","onSubmit","addListItem","action","type","value","listItems","map","trigger","position","EmailIcon","size","round","FacebookMessengerIcon","LinkedinIcon","TelegramIcon","TwitterIcon","WhatsappIcon","window","location","href","text","ToDo","state","categories","addCategory","e","preventDefault","input","updatedState","createToDo","newItem","target","patchToDo","JSON","stringify","filteredItemArr","filter","filteredItem","Axios","method","url","data","then","response","setState","fetchStateFromId","this","length","pathname","split","idSt","todoIdUrl","path","onClick","reload","to","ref","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f85e5b5.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItems.css'\nimport { FormControlLabel } from '@material-ui/core';\nimport { Checkbox } from '@material-ui/core';\n\n\n\n\nfunction ListItem (props){\n    let checkboxClass = ''\n    props.item.isChecked? checkboxClass = 'checked' : checkboxClass = 'notChecked'\n    return (\n        <div className={checkboxClass}>\n            <FormControlLabel\n                control={<Checkbox  onChange={props.handleCheckbox}\n                checked = {props.item.isChecked}\n                id={props.item.itemName}\n                name={props.categoryId} />}\n                label={props.item.itemName}\n            />\n            \n        </div>   \n    )\n}\nexport default ListItem","import React from 'react';\nimport './List.css'\nimport ListItem from './ListItems';\n\n\nfunction List (props){\n  console.log(props)\n  return (\n      <div id=\"ListWrapper\" className=\"ListWrapper\">\n          <h4>{props.category.categoryName}</h4>\n          <div className=\"addItemsWrapper\">\n          <form onSubmit={props.addListItem} id={props.category.categoryName} action=\"\" >\n              <input type=\"text\"\n                      name=\"item\"/>\n              <input className=\"submitBtn\" type=\"submit\" \n                      value=\"+\" />\n          </form>\n          </div>\n          <div>\n            {props.category.listItems.map(item => {\n                return <ListItem handleCheckbox = {props.handleCheckbox} item={item} categoryId={props.category.categoryName} />\n            })}\n          </div>\n      </div>\n  )\n}\n\nexport default List;","import React from 'react';\nimport Popup from \"reactjs-popup\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\n\nimport {\n    EmailIcon,\n    FacebookIcon,\n    FacebookMessengerIcon,\n    LinkedinIcon,\n    MailruIcon,\n    TelegramIcon,\n    TwitterIcon,\n    WhatsappIcon,\n  } from \"react-share\";\nimport {\n    FacebookShareCount,\n    OKShareCount,\n    PinterestShareCount,\n    RedditShareCount,\n    TumblrShareCount,\n    VKShareCount\n  } from \"react-share\";\nimport {\n    EmailShareButton,\n    FacebookShareButton,\n    LinkedinShareButton,\n    MailruShareButton,\n    TelegramShareButton,\n    TwitterShareButton,\n    WhatsappShareButton,\n  } from \"react-share\";\n\n\n\n  export default () => (\n    <Popup className=\"popup\" trigger={<button>Share</button>} position=\"right center\">\n      <div>\n        <EmailIcon size={30} round={true} />\n        <FacebookMessengerIcon size={30} round={true} />\n        <LinkedinIcon size={30} round={true} />\n        <TelegramIcon size={30} round={true} />\n        <TwitterIcon size={30} round={true} />\n        <WhatsappIcon size={30} round={true} />\n        <textarea id=\"urlArea\">{window.location.href}</textarea>\n        <CopyToClipboard text={window.location.href}>\n            <button>copy</button>\n        </CopyToClipboard>\n      </div>\n    </Popup>\n  );\n\n\n  \n\n\n\n\n//   export default () => (\n//     <Popup trigger={<button className=\"button\"> Share </button>} modal>\n//       {close => (\n//         <div className=\"modal\">\n//           <a className=\"close\" onClick={close}>\n//             &times;\n//           </a>\n//           <div className=\"content\">\n            \n//           </div>\n//           <div className=\"actions\">\n            \n//             <button\n//               className=\"button\"\n//               onClick={() => {\n//                 close();\n//               }}\n//             >\n//               close modal\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </Popup>\n//   );","import React from 'react';\nimport List from './List'\nimport './ToDo.css'\nimport Axios from 'axios';\nimport Popup from './Share'\n\nimport { \n  BrowserRouter,\n  Switch,\n  Route,\n  // Link,\n  Redirect,\n} from 'react-router-dom'\n\nclass ToDo extends React.Component {\n  state = {\n    categories: [],\n    id: \"\"\n  }\n\n  addCategory = e => {\n    e.preventDefault();\n    if(this.input.value){\n      var updatedState = [...this.state.categories, {categoryName:this.input.value, listItems: []}]\n    }\n    this.createToDo(updatedState)\n  }\n\n  addListItem = e => {\n    e.preventDefault();\n    let id = this.state.id\n    let newItem = {itemName: e.target.item.value, isChecked: false}\n    this.patchToDo(newItem, id)\n  }\n\n  handleCheckbox = e => {\n    console.log(\"STATE \"+JSON.stringify(this.state))\n    console.log(\"ETN \"+e.target.name)\n    console.log(\"ETN ID \"+e.target.id)\n    let id = this.state.id\n    let filteredItemArr = this.state.categories[0].listItems.filter( item => item.itemName === e.target.id)\n    console.log(filteredItemArr)\n    let filteredItem = filteredItemArr[0]\n    filteredItem.isChecked = !filteredItem.isChecked;\n    this.patchToDo(filteredItem, id)\n  }\n\n  createToDo = (categories) => {\n    Axios({\n      method: 'post',\n      url: 'https://fierce-fortress-81906.herokuapp.com/todo',\n      data: {\n        categories\n      }\n    }).then(response => {\n      this.setState({\n        categories: response.data.data.categories,\n        id: response.data.id\n      })\n    })\n  }\n\n  patchToDo = (item, id) => {\n    Axios({\n      method: 'patch',\n      url: `https://fierce-fortress-81906.herokuapp.com/todo/${id}`,\n      data: {\n         item\n      }\n    }).then(response => {\n      this.setState({\n        categories: response.data.categories\n      })\n    })\n  }\n  \n  fetchStateFromId = id => {\n    Axios({\n      method: 'get',\n      url: `https://fierce-fortress-81906.herokuapp.com/todo/${id}`,\n    }).then(response => {\n      this.setState({\n        categories: response.data.categories,\n        id: id\n      })\n    })\n  }\n\n  render(){\n    if (!this.state.id && this.state.categories.length === 0){\n      let id = window.location.pathname.split('/')[2]\n      if(id)\n        this.fetchStateFromId(id) \n    }\n    let idSt = this.state.id\n    let todoIdUrl = `/todo/${idSt}`\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/todo/:id\">\n            {this.state.categories.map(category => {\n              return <List addListItem={this.addListItem} handleCheckbox={this.handleCheckbox} category = {category} />\n            })}\n            <div>\n              <Popup />\n              <button onClick={()=>{window.location.reload()}}>Relode</button>\n            </div> \n          </Route>\n          <Route path=\"/\">\n            {idSt ? <Redirect to={todoIdUrl} /> : <Redirect to=\"/\"/>}\n            <div id=\"toDoWrapper\" className=\"toDoWrapper\">\n              <div className=\"addCatWrapper\">\n                <form onSubmit={this.addCategory} action=\"\">\n                  <input ref={(input) => this.input = input}\n                          type=\"text\" \n                          name=\"category\" \n                  />\n                    <input type=\"submit\" \n                          value=\"New List\" \n                    />\n                </form>\n              </div>         \n            </div>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    );\n  }  \n}\n\nexport default ToDo;","import React from 'react';\nimport ToDo from './ToDo/ToDo'\nimport './App.css';\nimport { \n  BrowserRouter,\n  Switch,\n  Route,\n  Link,\n  // Redirect,\n} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <main id=\"mainWrapper\">\n        <BrowserRouter>\n          <Link to=\"/\"><div className=\"homebtn\">Home</div></Link>\n          <Switch>\n            <Route path=\"/todo\">  \n              <ToDo/>\n            </Route>  \n            <Route path=\"/\">\n              <section className=\"home\">\n                <Link to=\"/todo\"><button className=\"mainNav\">To-Do</button></Link>\n                <Link to=\"/poll\"><button className=\"mainNav\">Poll</button></Link>\n              </section> \n            </Route>   \n          </Switch>\n        </BrowserRouter>\n    </main>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}